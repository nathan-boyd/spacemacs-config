;; dont prompt to follow symlinks
(setq vc-follow-symlinks t)

(setq linum-format "%d")
(setq evil-emacs-state-cursor '(bar . 2))

;; turn off warning for active process exist on exit
(add-hook 'comint-exec-hook
          (lambda () (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)))

;;;;;;;;;;;;;;;;;;;;;
;; powerline setup ;;
;;;;;;;;;;;;;;;;;;;;;
(use-package powerline
  :config
  (setq-default powerline-display-hud nil)
  (setq powerline-default-separator 'utf-8)
  (setq ns-use-srgb-colorspace nil)
  (setq powerline-default-separator 'arrow)
  (powerline-default-theme))

;;;;;;;;;;;;;;;;;;;;;;
;; setup whitespace ;;
;;;;;;;;;;;;;;;;;;;;;;
(require 'whitespace)
;; (global-whitespace-mode 1)
(setq whitespace-display-mappings '(
                                    (space-mark 32 [183] [46])   ; 32 SPACE 「 」
                                    (newline-mark 10 [182 10])   ; 10 LINE FEED
                                    (tab-mark 9 [187 9] [92 9])  ; 9  TAB
                                    ))
(auto-completion :variables
                 auto-completion-return-key-behavior 'complete
                 auto-completion-tab-key-behavior 'cycle
                 auto-completion-complete-with-key-sequence nil
                 auto-completion-complete-with-key-sequence-delay 0.1
                 auto-completion-enable-snippets-in-popup t
                 auto-completion-enable-sort-by-usage t
                 auto-completion-enable-help-tooltip t
                 auto-completion-private-snippets-directory nil)

;; add extra snippet directories
(setq yas-snippet-dirs (append yas-snippet-dirs
                               '("~/snippets")))


;;;;;;;;;;;;;;;;;;;;
;; setup packages ;;
;;;;;;;;;;;;;;;;;;;;

(use-package company
  :ensure t
  :init
  :diminish company-mode
  :init
  (setq company-minimum-prefix-length 2
        company-require-match 0
        company-selection-wrap-around t
        company-tooltip-limit 20                       ; bigger popup window
        company-tooltip-align-annotations 't           ; align annotations to the right tooltip border
        company-idle-delay .4                          ; decrease delay before autocompletion popup shows
        company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
  :bind (("C-<return>" . company-complete)
         :map company-active-map
         ("C-n"        . company-select-next)
         ("C-p"        . company-select-previous)
         ([return]     . company-complete-selection)
         ("C-w"        . backward-kill-word)
         ("C-c"        . company-abort)
         ("C-c"        . company-search-abort))
  :config
  (global-company-mode)
  (add-to-list 'company-backends 'company-keywords)
  (add-to-list 'company-backends 'company-robe))

(use-package chef-mode
  :ensure t
  :diminish chef-mode)

(use-package robe
  :ensure t
  :diminish robe-mode
  :config
  (add-hook 'ruby-mode-hook 'robe-mode)
  (add-hook 'ruby-mode-hook (lambda () (robe-start))))

;;;;;;;;;;;;;;;;
;; setup robe ;;
;;;;;;;;;;;;;;;;
(add-hook 'ruby-mode-hook 'robe-mode)

ruby-mode has keybinding [C-c C-s] for `inf-ruby'.
auto start robe `robe-start' after start `inf-ruby'.
(defun my-robe-start ()
  (interactive)
  (unless robe-running
    (robe-start)))

(defadvice inf-ruby-console-auto (after inf-ruby-console-auto activate)
  "Run `robe-start' after `inf-ruby-console-auto' started."
  (my-robe-start))

(with-eval-after-load 'projectile-rails
  (define-key projectile-rails-mode-map
    [remap inf-ruby] 'inf-ruby-console-auto))

(defadvice inf-ruby (after inf-ruby activate)
  "Run `robe-start' after `inf-ruby' started."
  (my-robe-start))

(define-key enh-ruby-mode-map (kbd "C-c C-s") 'inf-ruby)

;; auto start robe process for completing
(defun my-robe-auto-start ()
  (unless robe-running
    (call-interactively 'inf-ruby)))
(add-hook 'enh-ruby-mode-hook #'my-robe-auto-start)

(spaceline-compile)
