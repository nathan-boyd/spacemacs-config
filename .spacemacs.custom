(setq linum-format "%d")
(setq evil-emacs-state-cursor '(bar . 2))
(setq-default omnisharp--curl-executable-path "/usr/bin/curl")
(setq-default omnisharp-server-executable-path "/usr/local/bin/omnisharp")
(setq-default flycheck-ruby-rubocop-executable "/Users/nboyd/.rvm/gems/ruby-2.2.2/bin/rubocop")

;; turn off warning for active process exist on exit
(add-hook 'comint-exec-hook
          (lambda () (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)))


;; (set-face-attribute 'whitespace-line nil)
;; (set-face-attribute 'whitespace-tab nil              :foreground "dim gray":background "#3F3F3F")
;; (set-face-attribute 'whitespace-space nil            :foreground "dim gray":background "#3F3F3F")
;; (set-face-attribute 'whitespace-newline nil          :foreground "dim gray":background "#3F3F3F")
;; (set-face-attribute 'whitespace-indentation nil      :foreground "dim gray":background "#3F3F3F")
;; (set-face-attribute 'trailing-whitespace nil         :foreground "dim gray":background "#4F4F4F")
;; (set-face-attribute 'whitespace-empty nil            :foreground "dim gray":background "#4F4F4F")
;; (set-face-attribute 'whitespace-space-after-tab nil  :foreground "dim gray":background "#4F4F4F")
;; (set-face-attribute 'whitespace-space-before-tab nil :foreground "dim gray":background "#4F4F4F")
;; (set-face-attribute 'whitespace-trailing nil         :foreground "dim gray":background "#4F4F4F")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; define duplicate-line function ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun my/duplicate-line()
  "Duplicate current line."
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (forward-line 1)
  (yank))

;; bind key and override all minor modes with *
(bind-keys*
 ("M-m d" . my/duplicate-line))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; setup exec from shell ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package exec-path-from-shell
  :ensure t
  :init
    (defvar exec-path-from-shell-check-startup-files)
    (setq exec-path-from-shell-check-startup-files nil)
  :config
    (exec-path-from-shell-initialize))

;;;;;;;;;;;;;;;;;;;;;;;;
;; setup feature-mode ;;
;;;;;;;;;;;;;;;;;;;;;;;;
(use-package feature-mode
  :ensure t
  :diminish feature-mode
  :config
  (setq feature-step-search-path "features/**/*steps.rb")
  (setq feature-step-search-gems-path "gems/ruby/*/gems/*/**/*steps.rb")
  (add-to-list 'auto-mode-alist '("\.feature$" . feature-mode)))

;;;;;;;;;;;;;;;;;;;;;
;; omnisharp setup ;;
;;;;;;;;;;;;;;;;;;;;;
(defun find-vs-solution-upwards (dirname)
  "Recursively find first VS solution file from this directory upwards."
  (unless (or (string-empty-p dirname) (string-equal dirname "/"))
    (let ((slns (directory-files dirname 't "\\.sln$")))
      (if slns
          (car slns)
        (find-vs-solution-upwards (expand-file-name (concat (file-name-as-directory dirname) "..")))))))

(defun omnisharp-server-running? ()
  "Non-nil if there is a buffer called \"OmniServer\"."
  (get-buffer "OmniServer"))

(defun maybe-start-omnisharp ()
  "Does what it says."
  (interactive)
  (unless (omnisharp-server-running?)
    (omnisharp-start-omnisharp-server (find-vs-solution-upwards (file-name-directory (buffer-file-name))))))

(add-hook 'csharp-mode-hook 'omnisharp-mode)
(add-hook 'csharp-mode-hook 'maybe-start-omnisharp)

;;;;;;;;;;;;;;;;;;;;;
;; powerline setup ;;
;;;;;;;;;;;;;;;;;;;;;
(use-package powerline
  :config
  (setq-default powerline-display-hud nil)
;;  (setq powerline-default-separator 'utf-8)
  (setq ns-use-srgb-colorspace nil)
  (setq powerline-default-separator 'arrow)
  (powerline-default-theme))

;;;;;;;;;;;;;;;
;; setup rvm ;;
;;;;;;;;;;;;;;;
(use-package rvm
  :config
    (rvm-use-default))

;;;;;;;;;;;;;;;;
;; setup robe ;;
;;;;;;;;;;;;;;;;
;; (add-hook 'ruby-mode-hook 'robe-mode)

;; ruby-mode has keybinding [C-c C-s] for `inf-ruby'.
;; auto start robe `robe-start' after start `inf-ruby'.
;; (defun my-robe-start ()
;;   (interactive)
;;   (unless robe-running
;;     (robe-start)))

;; (defadvice inf-ruby-console-auto (after inf-ruby-console-auto activate)
;;   "Run `robe-start' after `inf-ruby-console-auto' started."
;;   (my-robe-start))

;; (with-eval-after-load 'projectile-rails
;;   (define-key projectile-rails-mode-map
;;     [remap inf-ruby] 'inf-ruby-console-auto))

;; (defadvice inf-ruby (after inf-ruby activate)
;;   "Run `robe-start' after `inf-ruby' started."
;;   (my-robe-start))

;; (define-key enh-ruby-mode-map (kbd "C-c C-s") 'inf-ruby)

;; ;; auto start robe process for completing
;; (defun my-robe-auto-start ()
;;   (unless robe-running
;;     (call-interactively 'inf-ruby)))
;; (add-hook 'enh-ruby-mode-hook #'my-robe-auto-start)

;;;;;;;;;;;;;;;;;;;;;;
;; setup whitespace ;;
;;;;;;;;;;;;;;;;;;;;;;
(require 'whitespace)
;; (global-whitespace-mode 1)
(setq whitespace-display-mappings '(
  (space-mark 32 [183] [46])   ; 32 SPACE 「 」
  (newline-mark 10 [182 10])   ; 10 LINE FEED
  (tab-mark 9 [187 9] [92 9])  ; 9  TAB
))
